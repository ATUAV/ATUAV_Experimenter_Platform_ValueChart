"use strict";
/*
* @Author: aaronpmishkin
* @Date:   2016-06-27 17:36:40
* @Last Modified by:   aaronpmishkin
* @Last Modified time: 2017-05-31 18:02:32
*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetObjectiveColorsInteraction = void 0;
// Import Angular Classes:
const core_1 = require("@angular/core");
// Import Libraries:
const d3 = require("d3");
const Observable_1 = require("rxjs/Observable");
require("../../app/utilities/rxjs-operators");
// Import Application Classes:
const services_1 = require("../services");
const definitions_1 = require("../definitions");
/*
    This class implements the Set Objective Colors ValueChart user interaction. When it is enabled, a user can click on a PrimitiveObjective's
    label in the label area to open a color picker. The color picker can be used to change the selection objective's color, with the ValueChart
    re-rendering to be whatever color is currently selected.
*/
let SetObjectiveColorsInteraction = /** @class */ (() => {
    let SetObjectiveColorsInteraction = class SetObjectiveColorsInteraction {
        // ========================================================================================
        // 									Constructor
        // ========================================================================================
        constructor(changeDetectionService) {
            this.changeDetectionService = changeDetectionService;
            /*
                @param eventObject - The click event generated by a user click on an objective label.
                @returns {void}
                @description 	Helper function that is the callback for when the onClick observable detects a click event and then pushes it to all observables.
                                This is where the actual change in a objective's color is accomplished.
            */
            this.handleColorChange = (eventObject) => {
                var targetObjective = d3.select(eventObject.target).datum().objective;
                var colorPicker = document.querySelector('#primitiveObjective-color-picker');
                colorPicker.removeAllListeners(); // Remove any old listeners from the color picker.
                // Attach a listener to the change event that fires when the value of the color picker changes. Note that this event fires
                // whenever the value of the color picker changes, NOT when the user makes a decision and closes the color picker.
                // The body of this listener is where the objective's color is set.
                colorPicker.onchange = (e) => {
                    var color = e.target.value;
                    targetObjective.setColor(color);
                };
                colorPicker.click(); // Open the color picker by programmatically clicking on it.
            };
        }
        // ========================================================================================
        // 									Methods
        // ========================================================================================
        /*
            @param enableExpanding - Whether or not to enable clicking on a PrimitiveObjective's label in the label area to open a color picker that can be used to
                                     change that objective's color.
            @returns {void}
            @description 	Toggles clicking on a PrimitiveObjective's label in the label area to open a color picker that can be used to
                            change that objective's color. Only one objective's color can be modified at one time using the color picker.
        */
        toggleSettingObjectiveColors(setObjectiveColors, rootContainer) {
            // Initialize the observable that is used to detect clicks and notifies handlers.
            let primitiveObjectiveLabels = rootContainer.querySelectorAll('.' + definitions_1.LabelDefinitions.PRIMITIVE_OBJECTIVE_LABEL);
            this.clicks = Observable_1.Observable.fromEvent(primitiveObjectiveLabels, 'click');
            if (this.onClick != undefined)
                this.onClick.unsubscribe();
            // Attach the click listener to the labels if setObjectiveColors is true. The body of this listener will be executed whenever a user
            // clicks on one of the labels.
            if (setObjectiveColors) {
                this.onClick = this.clicks.subscribe(this.handleColorChange);
            }
        }
    };
    SetObjectiveColorsInteraction = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [services_1.ChangeDetectionService])
    ], SetObjectiveColorsInteraction);
    return SetObjectiveColorsInteraction;
})();
exports.SetObjectiveColorsInteraction = SetObjectiveColorsInteraction;
//# sourceMappingURL=SetObjectiveColors.interaction.js.map